import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,f as l,a as n,b as s,d as t,e,r as i}from"./app.a4ff1c07.js";const r={},u=n("p",null,[s("JavaScript 规则 "),n("code",null,"@js:"),s(" 是亦搜的灵魂。在任何规则中都可以使用 "),n("code",null,"@js:"),s(" 来插入 JavaScript 代码，实现更加复杂的功能。")],-1),d=e(`<h2 id="规划说明" tabindex="-1"><a class="header-anchor" href="#规划说明" aria-hidden="true">#</a> 规划说明</h2><p><strong>格式：</strong> <code>@js:脚本代码</code></p><div class="custom-container info"><p class="custom-container-title">规则说明</p><p><code>结果规则</code> 会成为下一条 <code>地址规则</code> 的 <code>result</code>，成为下一条除地址规则的 <code>lastResult</code>。地址规则的响应会成为其他规则的 <code>result</code>。</p><p>筛选模式时，发现地址规则中栏目的附加数据 <code>data</code>，会在下一步取发现列表时成为 <code>lastResult</code> 的值。</p></div><h2 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量" aria-hidden="true">#</a> 内置变量</h2><table><thead><tr><th>变量名</th><th>可用规则</th><th>描述</th></tr></thead><tbody><tr><td>host</td><td>全部规则</td><td>域名 URL</td></tr><tr><td>baseUrl</td><td>除地址外所有规则</td><td>当前地址规则的 URL</td></tr><tr><td>result</td><td>除搜索与发现地址外所有规则</td><td>结果规则的返回值</td></tr><tr><td>lastResult</td><td>除搜索地址外所有规则</td><td>上一条结果规则的返回值</td></tr><tr><td>keyword</td><td>搜索地址规则</td><td>搜索关键字</td></tr><tr><td>page</td><td>地址规则</td><td>地址规则当前页码</td></tr><tr><td>pageSize</td><td>地址规则</td><td>地址规则当前分页大小</td></tr><tr><td>cookie</td><td>全部规则</td><td>请求规则 cookie 数据</td></tr><tr><td>kind</td><td>发现地址规则, 发现列表规则</td><td><strong>筛选模式</strong>栏目类别值</td></tr></tbody></table><p><strong>注意</strong>: <code>lastResult</code> 在筛选模式的发现列表规则中为栏目的扩展数据。</p><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h2><p>亦搜内置了常用的一些功能函数和加解密相关函数，以方便规则编写。</p><h3 id="alert-msg" tabindex="-1"><a class="header-anchor" href="#alert-msg" aria-hidden="true">#</a> <strong>alert</strong> (msg);</h3><hr><p>显示消息框， 示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>  <span class="token function">alert</span><span class="token punctuation">(</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="console-log-msg" tabindex="-1"><a class="header-anchor" href="#console-log-msg" aria-hidden="true">#</a> <strong>console.log</strong> (msg);</h3><hr><p>调试规则时，显示调试信息。</p><p>参数 <code>msg</code> 为消息内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是调试信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;这是错误信息&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-http-url-options" tabindex="-1"><a class="header-anchor" href="#async-http-url-options" aria-hidden="true">#</a> <em>async</em> <strong>http</strong> (url, [options])</h3><hr><p>发起<code>GET</code>或<code>POST</code>请求。</p><p>参数 <code>url</code> 为请求地址，如果为空，自动设为 <code>host</code> ，如果为相对地址，会自动补全 <code>host</code>。</p>`,21),k=n("code",null,"options",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch",target:"_blank",rel:"noopener noreferrer"},m=e(`<p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// GET 请求</span>
    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// POST 请求</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token string">&#39;http://xxxx&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">&#39;no-cache&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;user-agent&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Mozilla/4.0 MDN Example&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> html<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-require-url" tabindex="-1"><a class="header-anchor" href="#async-require-url" aria-hidden="true">#</a> <em>async</em> <strong>require</strong> (url)</h3><hr><p>载入亦搜内置或远程的 JavaScript 文件。</p><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// 载入内置的 cheerio 库</span>
    <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cheerio&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 载入远程的 jquery 库</span>
    <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https://cdn.staticfile.org/jquery/2.0.3/jquery.min.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>require</code> 会使用本地缓存。重启 app 时会在后台更新缓存。</p></div><p><strong>内置的 js 库：</strong></p>`,9),h=n("thead",null,[n("tr",null,[n("th",null,"名称"),n("th",null,"功能"),n("th",null,"参考资料")])],-1),b=n("td",null,"cheerio",-1),g=n("td",null,"服务器端的 jQuery 核心实现, 解析HTML页面",-1),y={href:"https://github.com/cheeriojs/cheerio/wiki/Chinese-README",target:"_blank",rel:"noopener noreferrer"},x=n("tr",null,[n("td",null,"unzip"),n("td",null,"解压库"),n("td",null,"-")],-1),f=n("td",null,"CryptoJS",-1),j=n("td",null,"加解密库",-1),w={href:"https://cryptojs.gitbook.io/docs",target:"_blank",rel:"noopener noreferrer"},S=e(`<h3 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid" aria-hidden="true">#</a> <strong>uuid</strong> ();</h3><hr><p>返回 UUID 字符串。</p><h3 id="randomstr-len" tabindex="-1"><a class="header-anchor" href="#randomstr-len" aria-hidden="true">#</a> <strong>randomStr</strong> (len);</h3><hr><p>返回指定长度的随机字符串。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>   <span class="token function">randomStr</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> <strong>localStorage</strong></h3><hr><p>读写本地数据（功能同浏览器中的 <code>localStorage</code> 类似）。localStorage 在亦搜中的作用域是当前的规则。localStorage 会将数据存储为字符串，所以，如果是非字符串内容，需要自行转换。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 写数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 清空数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>大白版 V3.4.5</code> 开始支持 <code>localStorage</code>。</p></div><h3 id="xpath-text-rule" tabindex="-1"><a class="header-anchor" href="#xpath-text-rule" aria-hidden="true">#</a> <strong>xpath</strong> (text, rule);</h3><hr><p>使用 XPath 解析器解析文本，返回解析结果数组。</p><p>参数 <code>text</code> 为待解析的文本</p><p>参数 <code>rule</code> 为 XPath 路径表达式，与 <code>@xpath:</code> 规则用法一致</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">xpath</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&#39;//class/*/@id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">xpath</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&#39;//class/*/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cssparse-text-rule" tabindex="-1"><a class="header-anchor" href="#cssparse-text-rule" aria-hidden="true">#</a> <strong>cssParse</strong> (text, rule);</h3><hr><p>使用 CSS 解析器解析文本，返回解析结果数据。</p><p>参数 <code>text</code> 为待解析的文本</p><p>参数 <code>rule</code> 为 CSS选择器表达式，与 <code>@css:</code> 规则用法一致</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">cssParse</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&#39;.item-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">cssParse</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&#39;.list a@title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encodeurigb2312-text" tabindex="-1"><a class="header-anchor" href="#encodeurigb2312-text" aria-hidden="true">#</a> <strong>encodeURIGb2312</strong> (text);</h3><hr><p>字符串转为 <code>gb2312</code> 字符集后进行URI 编码。</p><p>参数 <code>text</code> 为待编码的源字符串</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">encodeURIGb2312</span><span class="token punctuation">(</span><span class="token string">&#39;世界abc123你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encodebase64-text-charsert" tabindex="-1"><a class="header-anchor" href="#encodebase64-text-charsert" aria-hidden="true">#</a> <strong>encodeBase64</strong> (text, [charsert]);</h3><hr><p>字符串Base64编码。</p><p>参数 <code>text</code> 为待编码的源字符串</p><p>可选参数 <code>charsert</code> 为字符集编码，可设置为 <code>gbk</code> 或省略</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">encodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">encodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="decodebase64-text-charsert" tabindex="-1"><a class="header-anchor" href="#decodebase64-text-charsert" aria-hidden="true">#</a> <strong>decodeBase64</strong> (text, [charsert]);</h3><hr><p>Base64字符串解码。</p><p>参数 <code>text</code> 为待解码的Base64字符串</p><p>可选参数 <code>charsert</code> 为字符集编码，可设置为 <code>gbk</code> 、<code>raw</code> 或省略</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// raw 参数返回解密后内容的字节数组</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;raw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="md5-text" tabindex="-1"><a class="header-anchor" href="#md5-text" aria-hidden="true">#</a> <strong>md5</strong> (text);</h3><hr><p>字符串MD5加密。 参数 <code>text</code> 为待加密的源字符串</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aes" tabindex="-1"><a class="header-anchor" href="#aes" aria-hidden="true">#</a> <strong>AES</strong></h3><hr><p>ASE 加密解密。 示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@js<span class="token operator">:</span>
<span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> keyStr <span class="token operator">=</span> <span class="token string">&#39;0CoJUm6Qyw8W8jud&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> iv <span class="token operator">=</span> <span class="token string">&#39;0102030405060708&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 可选参数：是否返回 bytes 字节数组。</span>
<span class="token comment">// 1：返回 bytes 字节数组，不传或非1，返回 base64 字符串</span>
<span class="token keyword">let</span> raw <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// CBC 加密</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encryptCBC</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> keyStr<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encryptCBC</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> keyStr<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// CBC 解密</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decryptCBC</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> keyStr<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decryptCBC</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> keyStr<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ECB 加密</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encryptECB</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> keyStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encryptECB</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> keyStr<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ECB 解密</span>
<span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decryptECB</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> keyStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decryptECB</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> keyStr<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rsa" tabindex="-1"><a class="header-anchor" href="#rsa" aria-hidden="true">#</a> <strong>RSA</strong></h3><hr><p>RSA 加密解密。 示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> publicKey <span class="token operator">=</span> <span class="token string">&#39;xxxxxx&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> md <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mode <span class="token operator">=</span> <span class="token string">&#39;pkcs1&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 或 oaep, 默认使用 pkcs1</span>

<span class="token comment">// 可选参数：是否返回 bytes 字节数组。</span>
<span class="token comment">// 1：返回 bytes 字节数组，不传或非1，返回 base64 字符串</span>
<span class="token keyword">let</span> raw <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// rsa 加密</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token constant">RSA</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// rsa 解密</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token constant">RSA</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// bi RSA 加密</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token constant">RSA</span><span class="token punctuation">.</span><span class="token function">encryptBI</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> password<span class="token punctuation">,</span> md<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="crypto" tabindex="-1"><a class="header-anchor" href="#crypto" aria-hidden="true">#</a> <strong>Crypto</strong></h3><hr><p>其它内置加解密支持 <code>sha1</code>, <code>sha256</code>, <code>sha512</code> 等。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// md5</span>
Crypto<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// SHA 1 加密, 返回 \`hex\` 字符串</span>
Crypto<span class="token punctuation">.</span><span class="token function">sha1</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// SHA 256 加密, 返回 \`hex\` 字符串</span>
Crypto<span class="token punctuation">.</span><span class="token function">sha256</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// SHA 512 加密, 返回 \`hex\` 字符串</span>
Crypto<span class="token punctuation">.</span><span class="token function">sha512</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,65);function _(C,B){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,l(" more "),d,n("p",null,[s("参数 "),k,s(" 可选，配置HTTP选项，参考 "),n("a",v,[s("fetch"),t(a)]),s(" 函数")]),m,n("table",null,[h,n("tbody",null,[n("tr",null,[b,g,n("td",null,[n("a",y,[s("官方ReadMe"),t(a)])])]),x,n("tr",null,[f,j,n("td",null,[n("a",w,[s("CryptoJS"),t(a)])])])])]),S])}const R=p(r,[["render",_],["__file","004.html.vue"]]);export{R as default};
